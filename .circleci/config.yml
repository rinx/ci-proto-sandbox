alias:
  default: &default
    working_directory: /tmp/ci-proto-sandbox
    docker:
      - image: circleci/golang:latest
        environment:
          GITHUB_API: "https://api.github.com"
          OWNER_NAME: "rinx"
          REPO_NAME: "ci-proto-sandbox"
          DOCKER_USER: "rinx"
          DOCKER_REPO_NAME: "rinx"
          IMAGE_NAME: "ci-proto-sandbox"
          PROTOBUF_VERSION: "3.8.0"
  setup_remote_docker: &setup_remote_docker
    version: 18.06.0-ce
    docker_layer_caching: true

version: 2
jobs:
  protoc:
    <<: *default
    steps:
      - setup_remote_docker: *setup_remote_docker
      - checkout
      - run:
          name: fetch protoc
          command: |
            sudo apt-get update
            sudo apt-get install -y unzip git wget python3
            sudo rm -rf /var/lib/apt/lists/*
            wget https://github.com/google/protobuf/releases/download/v${PROTOBUF_VERSION}/protoc-${PROTOBUF_VERSION}-linux-x86_64.zip
            sudo unzip protoc-${PROTOBUF_VERSION}-linux-x86_64.zip -d /usr/local
            rm protoc-${PROTOBUF_VERSION}-linux-x86_64.zip
            sudo apt-get remove -y wget unzip
            sudo apt-get autoremove -y
      - run:
          name: ssh-keyscan - github.com
          command: |
            mkdir -p /home/circleci/.ssh
            ssh-keyscan -H github.com >> /home/circleci/.ssh/known_hosts
            git config user.email "rintaro.okamura@gmail.com"
            git config user.name "Rintaro Okamura"
      - run:
          name: protoc
          command: |
            make
      - run:
          name: commit and push
          command: |
            git add ./apis
            git commit -m "[ci skip] :package: Updating compiled files."
            git push origin master
  build:
    <<: *default
    steps:
      - run:
          name: docker init
          command: |
            if [[ $CIRCLE_SHELL_ENV =~ "localbuild" ]]; then
              sudo chown root /usr/bin/docker
              sudo chmod u+s /usr/bin/docker
            fi
      - setup_remote_docker: *setup_remote_docker
      - checkout
      - run:
          name: check docker version
          command: |
            docker version
      - run:
          name: docker image build
          command: |
            # env DOCKER_BUILDKIT=1 docker build -t ${DOCKER_REPO_NAME}/${IMAGE_NAME}:latest .
            docker build -t ${DOCKER_REPO_NAME}/${IMAGE_NAME}:latest .
      - run:
          name: save image
          command: |
            docker image save ${DOCKER_REPO_NAME}/${IMAGE_NAME}:latest > ./docker-image.tar
      - persist_to_workspace:
          root: .
          paths:
            - .
  publish_nightly:
    <<: *default
    steps:
      - run:
          name: docker init
          command: |
            if [[ $CIRCLE_SHELL_ENV =~ "localbuild" ]]; then
              sudo chown root /usr/bin/docker
              sudo chmod u+s /usr/bin/docker
            fi
      - setup_remote_docker: *setup_remote_docker
      - attach_workspace:
          at: .
      - run:
          name: load image from tar
          command: |
            docker load -i ./docker-image.tar
      - run:
          name: tag to latest
          command: |
            docker tag ${DOCKER_REPO_NAME}/${IMAGE_NAME}:latest ${DOCKER_REPO_NAME}/${IMAGE_NAME}:nightly
      - run:
          name: docker login
          command: |
            docker login -u ${DOCKER_USER} -p ${DOCKER_PASS}
      - run:
          name: push image to registory
          command: |
            docker push ${DOCKER_REPO_NAME}/${IMAGE_NAME}
  publish:
    <<: *default
    steps:
      - run:
          name: docker init
          command: |
            if [[ $CIRCLE_SHELL_ENV =~ "localbuild" ]]; then
              sudo chown root /usr/bin/docker
              sudo chmod u+s /usr/bin/docker
            fi
      - setup_remote_docker: *setup_remote_docker
      - attach_workspace:
          at: .
      - run:
          name: load image from tar
          command: |
            docker load -i ./docker-image.tar
      - run:
          name: tag to version-tag
          command: |
            docker tag ${DOCKER_REPO_NAME}/${IMAGE_NAME}:latest ${DOCKER_REPO_NAME}/${IMAGE_NAME}:$CIRCLE_TAG
      - run:
          name: tag to stable
          command: |
            docker tag ${DOCKER_REPO_NAME}/${IMAGE_NAME}:latest ${DOCKER_REPO_NAME}/${IMAGE_NAME}:stable
      - run:
          name: docker login
          command: |
            docker login -u ${DOCKER_USER} -p ${DOCKER_PASS}
      - run:
          name: push image to registory
          command: |
            docker push ${DOCKER_REPO_NAME}/${IMAGE_NAME}
  versioning:
    <<: *default
    steps:
      - run:
          name: docker init
          command: |
            if [[ $CIRCLE_SHELL_ENV =~ "localbuild" ]]; then
              sudo chown root /usr/bin/docker
              sudo chmod u+s /usr/bin/docker
            fi
      - setup_remote_docker: *setup_remote_docker
      - checkout
      - run:
          name: fetch rinx/orchis
          command: |
            wget https://github.com/rinx/orchis/releases/download/0.0.3/orchis-v0.0.3.tar.gz
            tar xzvf ./orchis-v0.0.3.tar.gz
            chmod a+x ./orchis
      - run:
          name: ssh-keyscan - github.com
          command: |
            mkdir -p /home/circleci/.ssh
            ssh-keyscan -H github.com >> /home/circleci/.ssh/known_hosts
      - run:
          name: check -> add tag and create release
          command: |
            PWD=`pwd`
            NEW_VERSION=`./orchis semver-tag`
            if [[ -n $NEW_VERSION ]]; then
              git push --tags
              ./orchis gh-release \
              --github-api-url=${GITHUB_API} --github-api-token=${GITHUB_TOKEN} \
              --github-owner=${OWNER_NAME} --github-repo=${REPO_NAME}
            fi
workflows:
  version: 2
  build:
    jobs:
      - protoc:
          filters:
            branches:
              only:
                - master
      - versioning:
          filters:
            branches:
              only:
                - master
  #     - build
  #     - publish_nightly:
  #         requires:
  #           - build
  #         filters:
  #           branches:
  #             only:
  #               - master
  # release:
  #   jobs:
  #     - build:
  #         filters:
  #           branches:
  #             ignore: /.*/
  #           tags:
  #             only: /[0-9]+\.[0-9]+\.[0-9]+/
  #     - publish:
  #         requires:
  #           - build
  #         filters:
  #           branches:
  #             ignore: /.*/
  #           tags:
  #             only: /[0-9]+\.[0-9]+\.[0-9]+/
